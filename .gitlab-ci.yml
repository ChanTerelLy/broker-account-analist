variables:
  TF_ROOT: terraform
test:
  only:
    - master
  variables:
    POSTGRES_DB: $POSTGRES_DB
    POSTGRES_USER: $POSTGRES_USER
    POSTGRES_PASSWORD: $POSTGRES_PASSWORD
    POSTGRES_HOST_AUTH_METHOD: trust
    DB_NAME: $POSTGRES_DB
    DB_USERNAME: $POSTGRES_USER
    DB_PASSWORD: $POSTGRES_PASSWORD
    DB_HOSTNAME: postgres
    DB_PORT: 5432
    SECRET_KEY: 123
    DEBUG: 0
    DB_ENGINE: django.db.backends.postgresql
    REDIS_URL: redis://redis:6379
  image: $CI_REGISTRY_IMAGE/$CI_COMMIT_BRANCH:$CI_COMMIT_SHA
  services:
  - postgres:12.7
  - redis:6.0
  script:
    - python manage.py collectstatic --settings=baa.settings.development
    - python manage.py migrate --settings=baa.settings.development
    - python manage.py test --settings=baa.settings.development

include:
  - template: AWS/Deploy-ECS.gitlab-ci.yml

stages:
- ".pre"
- validate
- plan
- apply
- build
- test
- review
- deploy
- production
- cleanup
- ".post"

".terraform":
  image:
    name: hashicorp/terraform:light
    entrypoint:
      - '/usr/bin/env'
      - 'PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin'

  before_script:
    - cd ${TF_ROOT}
    - rm -rf .terraform
    - terraform --version
    - export AWS_ACCESS_KEY_ID
    - export AWS_SECRET_ACCESS_KEY
    - terraform init

validate:
  extends: .terraform
  stage: validate
  script:
    - terraform validate

plan:
  extends: .terraform
  stage: plan
  script:
    - terraform plan -out "planfile"
  dependencies:
    - validate
  artifacts:
    paths:
      - planfile

apply:
  extends: .terraform
  stage: apply
  script:
    - terraform apply -input=false "planfile"
  dependencies:
    - plan
  when: manual

.pre:
   only:
    refs:
      - master